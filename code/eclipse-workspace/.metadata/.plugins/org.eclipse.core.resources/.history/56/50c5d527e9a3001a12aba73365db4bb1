package test.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.inesshasanoui.bibliotheekbeheersysteem.model.CopyItem;
import com.inesshasanoui.bibliotheekbeheersysteem.model.CopyState;
import com.inesshasanoui.bibliotheekbeheersysteem.service.CopyItemService;
import com.inesshasanoui.bibliotheekbeheersysteem.service.CopyItemServiceImpl;
import com.inesshasanoui.bibliotheekbeheersysteem.service.ReservationServiceImpl;
import com.inesshasnaoui.bibliotheekbeheersysteem.dao.CopyItemDao;
import com.inesshasnaoui.bibliotheekbeheersysteem.dao.ReservationDao;

class CopyItemTestCase {

	private CopyItemDao copyItemDao;
	private CopyItemService copyItemService;
	
	@BeforeEach
	void setUp() throws Exception {
		copyItemDao= mock(CopyItemDao.class);
		this.copyItemService= new CopyItemServiceImpl(copyItemDao);
	}
		@Test
	void copyIsAvailableIsAllowedToLoanSuccessTest() {
		//Arrange
		Boolean expected= true;
		int copyId =1;
		CopyItem availableCopy= new CopyItem(copyId,1,123456,CopyState.available.toString());
		// Mock
		when(copyItemDao.get(copyId)).thenReturn(availableCopy);
		//Act
		Boolean actual =copyItemService.copyIsAllowedToLoan(copyId);
		//Assert
		Assertions.assertEquals(expected, actual);
	}
	
	@Test
	void copyIsReservedIsNotAllowedToLoanTest() {
		//Arrange
		Boolean expected= false;
		int copyId =1;
		CopyItem availableCopy= new CopyItem(copyId,1,123456,CopyState.reserved.toString());
		// Mock
		when (copyItemDao.get(copyId)).thenReturn(availableCopy);
		//Act
		Boolean actual =copyItemService.copyIsAllowedToLoan(copyId);
		//Assert
		Assertions.assertEquals(expected, actual);
	}
	
}
