package com.inesshasanoui.bibliotheekbeheersysteem.service;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Period;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.inesshasanoui.bibliotheekbeheersysteem.model.Constants;
import com.inesshasanoui.bibliotheekbeheersysteem.model.CopyItem;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Item;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Loan;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Member;
import com.inesshasanoui.bibliotheekbeheersysteem.model.User;
import com.inesshasanoui.bibliotheekbeheersysteem.model.copyState;
import com.inesshasnaoui.bibliotheekbeheersysteem.dao.CopyItemDao;
import com.inesshasnaoui.bibliotheekbeheersysteem.dao.ItemDao;
import com.inesshasnaoui.bibliotheekbeheersysteem.dao.LoanDao;
import com.inesshasnaoui.bibliotheekbeheersysteem.dao.UserDao;

public class LoanServiceImpl implements LoanService {
	LoanDao loanDao;
	UserDao userDao;
	ItemDao itemDao;
	CopyItemDao copyItemDao;
	
	public LoanServiceImpl(LoanDao loanDao,UserDao userDao,ItemDao itemDao,CopyItemDao copyItemDao) {
		super();
		this.loanDao = loanDao;
		this.userDao=userDao;
		this.itemDao=itemDao;
		this.copyItemDao=copyItemDao;
	}

	@Override
	public Loan loanCopyItemToMember(int copyId, int userId) throws LoanException {
		
		//throw new TooManyLoanBooksException();
		User user = userDao.get(userId);
		Loan loan = null;
		
		if (memberIsAllowedToLoan(userId, copyId)) {
			Date operationDate = new Date();
			Date returnDate = addDays(operationDate, Constants.maxLendingDays);
			DateFormat dateFormat = new SimpleDateFormat("yyy-MM-dd");
			String date = dateFormat.format(operationDate);
			Float penality = null;
			Date returnedDate = null;

			loan = new Loan(userId, copyId, operationDate, returnDate, returnedDate, penality);
			CopyItem copyItem = copyItemDao.get(copyId);
			copyItem.setState(copyState.loaned.toString());

			loanDao.insert(loan);
			copyItemDao.update(copyItem);

		}else {
			System.out.println(" maximum geleende item  ");
			throw new TooManyLoanBooksException();
		}
		return loan;
	}


	@Override
	public Loan renewLoanCopyItem(int copyId) {
		Loan loan = loanDao.getLoanedcopyItem(copyId);
		
		Date returnDate =loan.getReturnDate();
		System.out.println("returnDate"+returnDate.toString());
		Date returnDateRenew =  addDays(returnDate, Constants.maxLendingDays);
	//	Date ReturnedDate = null;
	//	DateFormat dateFormat = new SimpleDateFormat("yyy-MM-dd");
	//	String returnDateRenewFormat=dateFormat.format(returnDateRenew); 
		loan.setReturnDate(returnDateRenew);
		//loan.setReturnedDate(ReturnedDate);
		System.out.println("**************************************");
		System.out.println(loan.getCopyId());
		System.out.println(loan.getUserId());
		System.out.println(loan.getReturnDate());
		//System.out.println(loan.getReturnedDate());
		System.out.println(loan.getReturnDate().toString());
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	//	String dateReturnedstring =dateFormat.format(loan.getReturnedDate());
	//	System.out.println(dateReturnedstring);
		loanDao.update(loan);
		return loan;
	}

	@Override
	public Boolean returnCopyItem(int copyId) {
		CopyItem copyItem = copyItemDao.get(copyId);
		copyItem.setState(copyState.available.toString());
		Loan loan = loanDao.getLoanedcopyItem(copyId);
		Date returnedDate = new Date();
	//	DateFormat dateFormat = new SimpleDateFormat("yyy-MM-dd");
	//	String date = dateFormat.format(returnedDate);

		loan.setReturnedDate(returnedDate);
		System.out.println(returnedDate.toString());
	//	System.out.println(date);
		copyItemDao.update(copyItem);
		loan.setPenality(penalityAmount(loan));
		
		loanDao.update(loan);
		penalityAmount(loan);
		return true;
	}

	public Date addDays(Date date, int nbDay) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(date); 
		cal.add(Calendar.DATE, nbDay);
		return cal.getTime();
	}

	@Override
	public Boolean memberIsAllowedToLoan(int userId, int copyId) {

		String state = copyItemDao.get(copyId).getState().toString();
		return ((loanDao.countCurrentLoans(userId) < Constants.maxLoanedItemsToAUser)
				&& (state.equals(copyState.available.toString())));
	}

	@Override
	public float penalityAmount(Loan loan) {
		Date dateReturned = loan.getReturnedDate();
		Date returnDate = loan.getReturnDate();
		float penality = 0;
		try {
			long diff = dateReturned.getTime() - returnDate.getTime();
			float nbDays = (diff / (1000 * 60 * 60 * 24));
			if (nbDays < 0)
				nbDays = 0;
			penality = nbDays * Constants.amountPenalityEachDay;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return penality;
	}

}
