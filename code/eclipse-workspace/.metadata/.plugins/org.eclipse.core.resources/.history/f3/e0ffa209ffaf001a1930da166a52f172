package com.inesshasnaoui.bibliotheekbeheersysteem.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.inesshasanoui.bibliotheekbeheersysteem.model.Book;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Category;
import com.inesshasanoui.bibliotheekbeheersysteem.model.CategoryItem;
import com.inesshasanoui.bibliotheekbeheersysteem.model.CopyItem;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Dvd;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Item;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Librarian;
import com.inesshasanoui.bibliotheekbeheersysteem.model.Member;
import com.inesshasanoui.bibliotheekbeheersysteem.model.TypeItem;
import com.inesshasanoui.bibliotheekbeheersysteem.model.User;
import com.inesshasanoui.bibliotheekbeheersysteem.model.UserState;

public class ItemDaoDB implements ItemDao {
	private ConnectDB connectDB;

	public ItemDaoDB(ConnectDB connectDB) {
		super();
		this.connectDB = connectDB;
	}

	@Override
	public Item insert(Item item)  {
		
		int itemId = 0;
		String typeItem = null;
		typeItem=item.getTypeItem().toString();
		String query = "INSERT INTO item";
		query += "(category_id,type_name,title,isbn,author,summary)";
		query += "VALUE ('" + item.getCategory().getId() + "','" + typeItem + "','" + item.getTitle() + "','"
				+ item.getIsbn() + "','" + item.getAuthor() + "','" + item.getSummary() + "')";
	
		itemId = connectDB.insertQuery(query);
		item.setId(itemId);
		return item;	
	}
	/*	@Override
	public Item insert(Item item) throws DaoException {
		
		int itemId = 0;
		String typeItem = null;
		typeItem=item.getTypeItem().toString();
		String query = "INSERT INTO item";
		query += "(category_id,type_name,title,isbn,author,summary)";
		query += "VALUE ('" + item.getCategory().getId() + "','" + typeItem + "','" + item.getTitle() + "','"
				+ item.getIsbn() + "','" + item.getAuthor() + "','" + item.getSummary() + "')";
		try {
		itemId = connectDB.insertQuery(query);
		item.setId(itemId);
		
		}catch (Exception e1) {
			throw new DaoException(ErrorsDaoException.dbDriverError.toString(),e1);
			}
		return item;	
	}*/

	@Override
	public Item update(Item item) {
		String query = "UPDATE item SET category_id='" + item.getCategory().getId() + "'";
	//	query += ",type_name='" + item.getType().toString() + "'";
		query += ",title='" + item.getTitle().toString() + "'";
		query += ",isbn='" + item.getIsbn()+ "'";
		query += ",author='" + item.getAuthor().toString() + "'";
		query += ",summary='" + item.getSummary() + "'";
	//	query += ",state='" + UserState.valueOf(user.getState().toString()) + "'";
		query += "WHERE id='" + item.getId() + "'";
		connectDB.executeUpdate(query);
		System.out.println("update item");
		System.out.println(item.getId());
		return item;
	}

	@Override
	public Item makeItemInActive(Item item) {
		String query = "UPDATE item SET active=false ";
		query += "WHERE id='" + item.getId() + "'";
		connectDB.executeUpdate(query);
		System.out.println("delete item");
		System.out.println(item.getId());
		item.setActive(false);
		return item;
	}
	@Override
	public boolean delete(Item item) {
		String query = "DELETE FROM item WHERE id =" + item.getId() + " ";
		int t = connectDB.executeUpdate(query);
		if (t >= 1)
			System.out.println("A new item was deleted successfully!" + item.getId());
		else
			System.out.println("Item" + item.getId() + " not deleted!");

		return (t >= 1);
	}

	@Override
	public Item get(long id) {
		String query = "SELECT * FROM item WHERE id = '"+ id +"'";
		query+=	 " AND active= true";
		ResultSet rs = connectDB.selectQuery(query);
		Item item = null;
		try {
		// if(	rs.getFetchSize() >0)
			item = extractItemFromResultSet(rs);
			
		} catch (SQLException e) {
			System.out.println("item bestaat niet");
			e.printStackTrace();
		}
				
		return item;
	}

	@Override
	public List<Item> getAll() {
		String query = "SELECT * FROM item ";
		query += "WHERE active= true";
				
		ResultSet rs = connectDB.selectQuery(query);
		List<Item> list = new ArrayList<>();
		try {
			list = extractListItemFromResultSet(rs);
		
		} catch (SQLException e) {
			e.printStackTrace();
		}				
		return list;
	}
	@Override
	public Item getIsbn(int isbn) {
		String query = "SELECT * FROM item WHERE isbn = '"+ isbn +"'";
		query+=	 " AND active= true";
		ResultSet rs = connectDB.selectQuery(query);
		Item item = null;
		try {
		// if(	rs.getFetchSize() >0)
			item = extractItemFromResultSet(rs);
			
		} catch (SQLException e) {
			System.out.println("item bestaat niet");
			e.printStackTrace();
		}
				
		return item;
	}
	
	
	@Override
	public List<Item> getItemByCategory(int categoryId) {
		String query = "SELECT * FROM item WHERE category_id = '"+ categoryId +"'";
		query+=	 " AND active= true";
		ResultSet rs = connectDB.selectQuery(query);
		List<Item> list = new ArrayList<>();
		try {
			list = extractListItemFromResultSet(rs);
		
		} catch (SQLException e) {
			System.out.println("item bestaat niet");
			e.printStackTrace();
		}				
				
		return list;
	}

	private List<Item> extractListItemFromResultSet(ResultSet rs) throws SQLException {
		
		List<Item> list = new ArrayList<>();
		
		 int id;
		 int isbn;
		 String title;
		 String author;
		 TypeItem type;
		 String summary;
		 Category category;
		 Item item = null;
		
		try {
			while (rs.next()) {
				id = rs.getInt("id");
				type = TypeItem.valueOf(rs.getString("type_name"));
				isbn = rs.getInt("isbn");
				title = rs.getString("title");
				author = rs.getString("author");
				summary = rs.getString("summary");
				category = new Category(rs.getInt("category_id"));
		
				item=item.getItem(id, isbn, title, author, type, summary,category,null);
				list.add(item);
			}
			return list;
		} catch (SQLException ex) {
			return null;
		}

	}


	private Item extractItemFromResultSet(ResultSet rs) throws SQLException {

		 int id;
		 int isbn;
		 String title;
		 String author;
		 TypeItem type;
		 String summary;
		 Category category ;
		 Item item = null;
		try {
			if (rs.next()) {

				id = rs.getInt("id");
				type = TypeItem.valueOf(rs.getString("type_name"));
				isbn = rs.getInt("isbn");
				title = rs.getString("title");
				author = rs.getString("author");
				summary = rs.getString("summary");
				//category = new Category(CategoryItem.valueOf(rs.getString("category")));
				category = new Category(rs.getInt("category_id"));
				
				item=item.getItem(id, isbn, title, author, type, summary,category,null);	
			}
			
			return item;
		} catch (SQLException ex) {
			return null;
		}
	}

		

}
